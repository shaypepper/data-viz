{"version":3,"sources":["webpack:///./src/components/happiestPlaylist.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/blogText.js","webpack:///./src/pages/happy/quanitifedSelfLayout.js","webpack:///./src/pages/happy/playlist.js"],"names":["HappiestPlaylist","componentDidMount","vizElement","document","getElementById","getElementsByTagName","style","width","height","scriptElement","createElement","src","parentNode","insertBefore","render","class","id","position","margin","href","alt","border","display","name","value","React","Component","Header","siteTitle","background","marginBottom","maxWidth","padding","to","color","textDecoration","defaultProps","Layout","children","data","site","siteMetadata","title","paddingTop","Date","getFullYear","BlogPost","marginTop","QuantifiedSelfLayout","Playlist"],"mappings":"4HAEMA,E,wLACJC,kBAAA,WACE,IACIC,EADaC,SAASC,eAAe,oBACbC,qBAAqB,UAAU,GAC3DH,EAAWI,MAAMC,MAAQ,QACzBL,EAAWI,MAAME,OAAS,QAC1B,IAAIC,EAAgBN,SAASO,cAAc,UAC3CD,EAAcE,IAAM,uDACpBT,EAAWU,WAAWC,aAAaJ,EAAeP,I,EAGpDY,OAAA,WACE,OACE,yBACEC,MAAM,qBACNC,GAAG,mBACHV,MAAO,CAAEW,SAAU,WAAYC,OAAQ,SAEvC,kCACE,uBAAGC,KAAK,KACN,yBACEC,IAAI,IACJT,IAAI,sFACJL,MAAO,CAAEe,OAAQ,YAIvB,4BAAQN,MAAM,aAAaT,MAAO,CAAEgB,QAAS,SAC3C,2BAAOC,KAAK,WAAWC,MAAM,wCAAyC,IACtE,2BAAOD,KAAK,qBAAqBC,MAAM,MAAO,IAC9C,2BAAOD,KAAK,YAAYC,MAAM,KAC9B,2BAAOD,KAAK,OAAOC,MAAM,kCACzB,2BAAOD,KAAK,OAAOC,MAAM,OACzB,2BAAOD,KAAK,UAAUC,MAAM,QAC5B,2BACED,KAAK,eACLC,MAAM,oFACL,IACH,2BAAOD,KAAK,qBAAqBC,MAAM,QACvC,2BAAOD,KAAK,uBAAuBC,MAAM,QACzC,2BAAOD,KAAK,kBAAkBC,MAAM,QACpC,2BAAOD,KAAK,kBAAkBC,MAAM,QACpC,2BAAOD,KAAK,gBAAgBC,MAAM,QAClC,2BAAOD,KAAK,SAASC,MAAM,mB,GA3CNC,IAAMC,WAkDtB1B,O,mFChDT2B,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACb,4BACEtB,MAAO,CACLuB,WAAW,gBACXC,aAAa,YAGf,yBACExB,MAAO,CACLY,OAAO,SACPa,SAAU,IACVC,QAAQ,sBAGV,wBAAI1B,MAAO,CAAEY,OAAQ,IACnB,kBAAC,OAAD,CACEe,GAAG,IACH3B,MAAO,CACL4B,MAAM,QACNC,eAAe,SAGhBP,OAWXD,EAAOS,aAAe,CACpBR,UAAU,IAGGD,Q,UCUAU,IArCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAI,OAUV,OACE,oCACE,kBAAC,EAAD,CAAQX,UAAWW,EAAKC,KAAKC,aAAaC,QAC1C,yBACEpC,MAAO,CACLY,OAAO,SACPa,SAAU,IACVC,QAAQ,wBACRW,WAAY,IAGd,8BAAOL,GACP,sCACK,IAAIM,MAAOC,cADhB,mBAGE,uBAAG1B,KAAK,4BAAR,e,uICxCV,yBAWe2B,IATE,SAAC,GAAkB,IAAhBR,EAAe,EAAfA,SAClB,OACE,yBAAKhC,MAAO,CAAEyC,UAAW,SACvB,gDACCT,K,kCCNP,oEAsDeU,UAxCc,SAAC,GAAkB,IAAhBV,EAAe,EAAfA,SAC9B,OACE,kBAAC,IAAD,KACE,yBAAKtB,GAAG,0BACN,qDACA,w4BAeA,2JAIA,yBAAKA,GAAG,cACN,kBAAC,OAAD,CAAMiB,GAAG,cAAT,2BACA,kBAAC,OAAD,CAAMA,GAAG,gBAAT,gCACA,kBAAC,OAAD,CAAMA,GAAG,mBAAT,0BAEF,6BACCK,M,kCC5CT,oEAyFeW,UA5EE,SAAC,GAAiB,EAAfX,SAClB,OACE,kBAAC,UAAD,KACG,IACD,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,2qBAUuD,KAEvD,+WAKgE,KAEhE,iWAKqE,KAErE,yeASA,gSAMA,oSAMA,gUAKc,KAEd,sPAMA","file":"component---src-pages-happy-playlist-js-bb7c47844561b6fa77bd.js","sourcesContent":["import React from \"react\"\n\nclass HappiestPlaylist extends React.Component {\n  componentDidMount() {\n    var divElement = document.getElementById(\"viz1572121772029\")\n    var vizElement = divElement.getElementsByTagName(\"object\")[0]\n    vizElement.style.width = \"800px\"\n    vizElement.style.height = \"852px\"\n    var scriptElement = document.createElement(\"script\")\n    scriptElement.src = \"https://public.tableau.com/javascripts/api/viz_v1.js\"\n    vizElement.parentNode.insertBefore(scriptElement, vizElement)\n  }\n\n  render() {\n    return (\n      <div\n        class=\"tableauPlaceholder\"\n        id=\"viz1572121772029\"\n        style={{ position: \"relative\", margin: \"auto\" }}\n      >\n        <noscript>\n          <a href=\"#\">\n            <img\n              alt=\" \"\n              src=\"https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Pl&#47;Playlist_15718830465650&#47;Story&#47;1_rss.png\"\n              style={{ border: \"none\" }}\n            />\n          </a>\n        </noscript>\n        <object class=\"tableauViz\" style={{ display: \"none\" }}>\n          <param name=\"host_url\" value=\"https%3A%2F%2Fpublic.tableau.com%2F\" />{\" \"}\n          <param name=\"embed_code_version\" value=\"3\" />{\" \"}\n          <param name=\"site_root\" value=\"\" />\n          <param name=\"name\" value=\"Playlist_15718830465650&#47;Story\" />\n          <param name=\"tabs\" value=\"no\" />\n          <param name=\"toolbar\" value=\"yes\" />\n          <param\n            name=\"static_image\"\n            value=\"https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;Pl&#47;Playlist_15718830465650&#47;Story&#47;1.png\"\n          />{\" \"}\n          <param name=\"animate_transition\" value=\"yes\" />\n          <param name=\"display_static_image\" value=\"yes\" />\n          <param name=\"display_spinner\" value=\"yes\" />\n          <param name=\"display_overlay\" value=\"yes\" />\n          <param name=\"display_count\" value=\"yes\" />\n          <param name=\"filter\" value=\"publish=yes\" />\n        </object>\n      </div>\n    )\n  }\n}\n\nexport default HappiestPlaylist\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\n\nconst BlogPost = ({ children }) => {\n  return (\n    <div style={{ marginTop: \"40px\" }}>\n      <h2>Notes on process</h2>\n      {children}\n    </div>\n  )\n}\n\nexport default BlogPost\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\n\nimport \"./happy.css\"\nimport Layout from \"../../components/layout\"\n\nconst QuantifiedSelfLayout = ({ children }) => {\n  return (\n    <Layout>\n      <div id=\"quantified-self-layout\">\n        <h1>Quanitified self: Joy</h1>\n        <p>\n          When I began working on this project, I had some fear that I wouldn't\n          like what I saw in my data, whichever data I chose. Unlike my peers, I\n          had no interest in self-accountability. So I began with a topic: Joy.\n          What are the things that make me happy in everyday life? The things\n          that make an eh day not so eh? Where do I look to keep my spirits\n          buoyed? It didn't take long to figure it out. During my workday, it's\n          my happy playlist (creatively titled The Happiest Playlist). It starts\n          with Barbra Streisand and doesn't lose steam after that. I also have a\n          particularly wonderful shoe collection, so I always have the option to\n          just look down if I want to smile. At the end of my day I come home to\n          my very pretty dog, Mousse. She is hilarious and sweet and a delight\n          to come home to. She usually greets me with a wagging tail that moves\n          her whole body and a toy as a gift.\n        </p>\n        <p>\n          I was smiling the entire time I was putting these together. I hope the\n          visualizations can bring you a little bit of joy too.\n        </p>\n        <div id=\"happy-list\">\n          <Link to=\"/happy/dog\">The Happiest Dog Photos</Link>\n          <Link to=\"/happy/shoes\">The Happiest Shoe Collection</Link>\n          <Link to=\"/happy/playlist\">The Happiest Playlist</Link>\n        </div>\n        <hr />\n        {children}\n      </div>\n    </Layout>\n  )\n}\n\nQuantifiedSelfLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default QuantifiedSelfLayout\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport QuantifiedSelfLayout from \"./quanitifedSelfLayout\"\nimport HappiestPlaylist from \"../../components/happiestPlaylist\"\nimport BlogPost from \"../../components/blogText\"\n\nconst Playlist = ({ children }) => {\n  return (\n    <QuantifiedSelfLayout>\n      {\" \"}\n      <HappiestPlaylist />\n      <BlogPost>\n        <p>\n          When I was a kid, my mom gave me an album put out by Clinique called\n          Happy. It was a compilation of random songs about being happy. I\n          listened to it all the time. In high school, I made my own version\n          with songs that were happy just to me. In the last two years, I\n          realized I needed a grown up version. I found songs I enjoyed that had\n          a positive message. I found as many as I could, and I listened to it\n          all the time. At some point I put it out to facebook that I was\n          looking for suggestions and people came through! In that way, this\n          list was collaborative. I've spent many hours trying to make all\n          transitions smooth. You shouldn't listen on shuffle.{\" \"}\n        </p>\n        <p>\n          This visualization was drastically different for pin-up than it is\n          now. It was simply a bar chart of release yaer with color based on\n          happiness score. From feedback I could tell this wasn't as interesting\n          to everyone else as it was to me. Even to me I was finding it a little\n          boring. What I really wanted to do was showcase the playlist.{\" \"}\n        </p>\n        <p>\n          I realized I could include the playlist itself. It is searchable by\n          artist, track name, happiness score, and release year. Then, the\n          audience will have a reference point when they look at the other\n          visualizations. This was inspired by many of my classmates\n          implementing search features and Tableau stories in creative ways.{\" \"}\n        </p>\n        <p>\n          The most interesting thing in this for me was being able to showcase\n          the playlist. Naturally, you can't have a visualization about music\n          without music. I did some searching and found a way to display song\n          previews using Tableau actions. This adds richness to the experience\n          since no one will know every song just by reading the title. It also\n          gives the reader an opportunity to see if they agree with Spotify in\n          its happiness ratings (or me for that matter).\n        </p>\n        <p>\n          One detail that I focused on through this whole project was only using\n          tooltips when it made sense. Perhaps because I work for a newspaper, I\n          am constantly thinking about how a visualization will translate to\n          print. I wanted to challenge myself in that way.\n        </p>\n        <p>\n          Another thing I was very careful about in the playlist visualization\n          was strategic use of color. It was important to me to not have an\n          overwhelming palette. Just two colors: one for happy and one for not\n          happy. To me this made the entire thing easier to digest.\n        </p>\n        <p>\n          One peculiar design decision I made was to do a bubble chart for each\n          individual score. This was interesting to me because it allowed you to\n          have a rough idea of composition with having to use a pie chart or\n          tree map. You also can see which songs spotify rated the same when you\n          hover over.{\" \"}\n        </p>\n        <p>\n          I also made a bunch of visualizations that ended up not making the\n          cut. I enjoyed the creative processing of making a bunch of\n          visualizations quickly and then choosing the interesting ones to take\n          to the next level.\n        </p>\n        <p>I am still open to suggestions for additional happy songs.</p>\n      </BlogPost>\n    </QuantifiedSelfLayout>\n  )\n}\n\nPlaylist.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Playlist\n"],"sourceRoot":""}